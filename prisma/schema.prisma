generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            UserRole
  contactNo       String
  address         String
  shippingAddress String
  profileImg      String
  reviewAndRating ReviewAndRating[]
  Order           Order[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
model Genre {
  id    String @id @default(uuid())
  title String
  book  Book[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("genres")
}
model Category {
  id    String @id @default(uuid())
  title String
  book  Book[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("categories")
}
model SubCategory {
  id    String @id @default(uuid())
  title String
  book  Book[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("sub_categories")
}
model Publication {
  id    String @id @default(uuid())
  title String
  book  Book[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("publications")
}

model Author {
  id    String @id @default(uuid())
  nameInBengali String?
  nameInEnglish String
  books Book[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("authors")
}

model Book {
  id              String            @id @default(uuid())
  name           String
  price           String
  discount String?
  publicationDate DateTime
  description String?
  quantity String
  thumbImage String[]
  images String[]
  slug String 
  rate String
  reviewCount String?
  new Boolean @default(true)
  /////////////////
  publication String
  publications Publication @relation(fields: [publication], references: [id])
  authorIds          String
  author Author @relation(fields: [authorIds], references: [id])
  genre           String
  genres Genre @relation(fields: [genre], references: [id])
  subCategory String
  subCategorys        SubCategory          @relation(fields: [subCategory], references: [id])
  category      String
  categorys        Category          @relation(fields: [category], references: [id])
  ReviewAndRating ReviewAndRating[]
  orderedBook     OrderedBook[]
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
 
  @@map("books")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  bookId String
  book   Book   @relation(fields: [bookId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  @@map("review")
}

model Order {
  id          String        @id @default(uuid())
  userEmail   String
  user        User          @relation(fields: [userEmail], references: [email])
  status      Status       @default(pending)
  orderType  OrderType @default(cashOnDelivery)
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  orderedBook OrderedBook[]

  @@map("orders")
}

model OrderedBook {
  id       String @id @default(uuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id])
  quantity String
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt

  @@map("ordered_books")
}

enum UserRole {
  admin
  customer
}

enum Status {
  pending
  shipped
  delivered
}

enum OrderType {
  cashOnDelivery
  cash
}
